{"data":{"repository":{"pullRequest":{"reviewThreads":{"nodes":[{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"metadata may be an object in JSONL events, but Operation.metadata is typed as a string. This can lead to downstream issues when consumers assume a string. Normalize to a string by serializing non-string metadata.\n```suggestion\n                  metadata: typeof event.metadata === 'string'\n                    ? event.metadata\n                    : event.metadata\n                      ? JSON.stringify(event.metadata)\n                      : '',\n```","path":"src/server/index.ts","position":72,"line":560,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"Same as in src/server/index.ts: metadata may be an object for JSONL events. Ensure the value stored is a string (e.g., JSON.stringify for non-strings) to match the Operation shape and avoid runtime surprises.\n```suggestion\n                  metadata: typeof event.metadata === 'string'\n                    ? event.metadata\n                    : event.metadata !== undefined\n                      ? JSON.stringify(event.metadata)\n                      : '',\n```","path":"src/server/index-backup.ts","position":67,"line":582,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"Synchronous file I/O in a request handler can block the event loop and impair throughput, especially for large logs. Consider using streaming (readline/createReadStream) or async fs.promises to iterate lines without loading the entire file into memory.","path":"src/server/index.ts","position":52,"line":534,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"The JSONL parsing and event aggregation logic is duplicated in src/server/index-backup.ts. Consider extracting a shared utility (e.g., parseSessionLog) that returns operations, toolTokens, and systemReminderTokens to avoid drift and keep behavior consistent.","path":"src/server/index.ts","position":52,"line":534,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"The JSONL parsing and event aggregation logic is duplicated in src/server/index-backup.ts. Consider extracting a shared utility (e.g., parseSessionLog) that returns operations, toolTokens, and systemReminderTokens to avoid drift and keep behavior consistent.","path":"src/server/index.ts","position":101,"line":573,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"This path now throws an Error, whereas the analogous logic in stats previously returned a structured payload. Please standardize error handling (either throw consistently with centralized handling or return a structured error object) to avoid inconsistent client-facing behavior.","path":"src/server/index-backup.ts","position":106,"line":1071,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"As with src/server/index-backup.ts, this now throws on missing logs. If upstream tooling expects a structured content response, this could surface as a 500. Recommend aligning error semantics across summary/stats handlers and documenting the contract.","path":"get_session_summary_impl.ts","position":19,"line":36,"author":{"login":"copilot-pull-request-reviewer"}}]}},{"isResolved":false,"isOutdated":false,"comments":{"nodes":[{"body":"Same as src/server/index.ts: consider async/streaming parsing to prevent blocking the event loop and to handle large session logs efficiently.","path":"src/server/index-backup.ts","position":36,"line":556,"author":{"login":"copilot-pull-request-reviewer"}}]}}]}}}}}